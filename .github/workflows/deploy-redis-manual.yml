name: Deploy back-redis manual

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          tags: true

      - name: Switch to tag
        run: git checkout ${{ env.tag }}

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Determine Tag
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          else
            TAG=${{ github.ref_name }}
          fi
          echo "tag=$TAG" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Log-in to ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build and Push backend_redis Image
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          IMAGE_TAG: ${{ env.tag }}
        run: |
          cd backend_redis
          docker build --no-cache -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/redis-api-repo:$IMAGE_TAG .
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/redis-api-repo:$IMAGE_TAG

      - name: Update ECS service for backend_redis
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          IMAGE_TAG: ${{ env.tag }}
        run: |
          # Отримуємо поточний task_definition
          TASK_DEF=$(aws ecs describe-task-definition --task-definition redis-api-task --region $AWS_REGION)

          # Замінюємо тег образу в task_definition
          NEW_TASK_DEF=$(echo $TASK_DEF | jq '.taskDefinition | {containerDefinitions, family, executionRoleArn, taskRoleArn, networkMode, requiresCompatibilities, cpu, memory}')
          NEW_TASK_DEF=$(echo $NEW_TASK_DEF | jq '.containerDefinitions[0].image = "'$AWS_ACCOUNT_ID'.dkr.ecr.'$AWS_REGION'.amazonaws.com/redis-api-repo:'$IMAGE_TAG'"')

          # Зберігаємо новий task_definition у тимчасовий файл
          echo $NEW_TASK_DEF > new-task-def.json

          # Реєструємо новий task_definition
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://new-task-def.json --region $AWS_REGION | jq -r '.taskDefinition.taskDefinitionArn')

          # Оновлюємо ECS-сервіс з новою ревізією task_definition
          aws ecs update-service --cluster api-cluster --service redis_api_service --task-definition $NEW_TASK_DEF_ARN --region $AWS_REGION --force-new-deployment